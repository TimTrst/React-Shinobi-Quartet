[{"C:\\GIT\\react\\supertrumpf\\src\\index.tsx":"1","C:\\GIT\\react\\supertrumpf\\src\\App.tsx":"2","C:\\GIT\\react\\supertrumpf\\src\\admin\\Form.tsx":"3","C:\\GIT\\react\\supertrumpf\\src\\admin\\Form.styles.ts":"4","C:\\GIT\\react\\supertrumpf\\src\\game\\Shinobi.ts":"5","C:\\GIT\\react\\supertrumpf\\src\\admin\\validationSchema.tsx":"6","C:\\GIT\\react\\supertrumpf\\src\\admin\\Admin.tsx":"7","C:\\GIT\\react\\supertrumpf\\src\\admin\\List.tsx":"8","C:\\GIT\\react\\supertrumpf\\src\\admin\\ConfirmDialog.tsx":"9","C:\\GIT\\react\\supertrumpf\\src\\admin\\List.styles.ts":"10"},{"size":203,"mtime":1610360605677,"results":"11","hashOfConfig":"12"},{"size":2396,"mtime":1610360602379,"results":"13","hashOfConfig":"12"},{"size":3769,"mtime":1610531627766,"results":"14","hashOfConfig":"12"},{"size":803,"mtime":1610461187578,"results":"15","hashOfConfig":"12"},{"size":661,"mtime":1610353468952,"results":"16","hashOfConfig":"12"},{"size":675,"mtime":1610353468804,"results":"17","hashOfConfig":"12"},{"size":2141,"mtime":1610549292608,"results":"18","hashOfConfig":"12"},{"size":6611,"mtime":1610550017678,"results":"19","hashOfConfig":"12"},{"size":1259,"mtime":1610461202724,"results":"20","hashOfConfig":"12"},{"size":285,"mtime":1610536148943,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1xopfr0",{"filePath":"25","messages":"26","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"24"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"C:\\GIT\\react\\supertrumpf\\src\\index.tsx",[],["46","47"],"C:\\GIT\\react\\supertrumpf\\src\\App.tsx",["48","49","50","51","52"],"import './App.css';\r\nimport React from \"react\"\r\nimport update from \"immutability-helper\";\r\n\r\nimport Game from \"./game/Game\";\r\nimport DarkMode from \"./game/DarkMode\";\r\nimport Login from \"./login/login\";\r\nimport axios from 'axios';\r\nimport From from \"./admin/Form\";\r\nimport Shinobi from './game/Shinobi';\r\nimport Admin from \"./admin/Admin\";\r\n\r\ninterface State{\r\n  darkMode: boolean;\r\n  loggedIn: boolean;\r\n  errorFromParent: string;\r\n}\r\n\r\nexport default class App extends React.Component<{}, State> {\r\n  state = {\r\n    darkMode: false,\r\n    loggedIn: false,\r\n    errorFromParent: \"\",\r\n  };\r\n\r\n  toggleDarkMode = () => {\r\n    this.setState(prevState => (\r\n      {\r\n        darkMode: !prevState.darkMode\r\n      }\r\n    ));\r\n  };\r\n\r\nhandleLogin = async (username: string, password: string) => {\r\n  const result = await axios.post('http://localhost:3001/login', {\r\n    username,\r\n    password,\r\n  });\r\n  let loggedIn = false;\r\n  let error = \"Anmeldung fehlgeschlagen\";\r\n  if(result.data){\r\n    error = \"\";\r\n    loggedIn = true;\r\n  }\r\n  this.setState(prevState => \r\n    update(prevState, {\r\n      loggedIn: {$set: loggedIn },\r\n      errorFromParent: { $set: error},\r\n     })\r\n  );\r\n}\r\n\r\nrender(){\r\n  return(\r\n    <Admin />\r\n  )\r\n}\r\n\r\n/*\r\nrender(){\r\n    return (\r\n      <From\r\n        onSubmit={shinobi => {\r\n        const data = new FormData();\r\n        data.append('name', shinobi.name);\r\n        data.append('image', shinobi.image);\r\n        data.append('size', shinobi.size.toString());\r\n        data.append('weight', shinobi.weight.toString());\r\n        data.append('age', shinobi.age.toString());\r\n        data.append('chakra', shinobi.chakra.toString());\r\n        data.append('power', shinobi.power.toString());\r\n        axios.post('http://localhost:3001/card', data, {\r\n          headers: {\r\n           'content-type': 'multipart/form-data',\r\n           },\r\n      });\r\n    }}/>\r\n        );\r\n        \r\n      <DarkMode.Provider value = {this.state.darkMode}>\r\n        {\r\n          this.state.loggedIn && (\r\n            <>\r\n              <button onClick={this.toggleDarkMode}>DarkMode {this.state.darkMode && \"off\"}</button>\r\n              <Game title=\"Shinobi Quartet\"/>\r\n            </>\r\n          )}\r\n        {\r\n          !this.state.loggedIn && <Login onLogin={this.handleLogin} errorFromParent={this.state.errorFromParent} />\r\n        }\r\n        </DarkMode.Provider>\r\n      }\r\n    */ \r\n  }\r\n\r\n\r\n","C:\\GIT\\react\\supertrumpf\\src\\admin\\Form.tsx",["53"],"import React from \"react\";\r\nimport useCardAdmin from './useCardAdmin';\r\nimport { Form, Error, Field, TextField } from './Form.styles';\r\nimport Shinobi from \"../game/Shinobi\";\r\nimport { Formik, ErrorMessage, FieldProps } from \"formik\";\r\nimport validationSchema from \"./validationSchema\"; \r\nimport { Dialog, DialogTitle, DialogContent, DialogActions, Button,\r\n} from '@material-ui/core';\r\n\r\ninterface Props{\r\n    onSubmit: (shinobi: Shinobi) => void;\r\n    shinobi?: Shinobi;\r\n    open: boolean;\r\n    onClose: () => void;\r\n}\r\n\r\nexport default function From({ \r\n  onSubmit,\r\n  shinobi = new Shinobi('', '', '', '', '', '', ''),\r\n  open,\r\n  onClose,\r\n  }: Props) {\r\n    return (\r\n      <Dialog open={open} onClose={onClose} aria-labelledby=\"form-dialog-title\" aria-describedby=\"form-dialog-description\">\r\n        <Formik\r\n          initialValues={shinobi}\r\n          validationSchema= {validationSchema}\r\n          onSubmit={(e, actions) => {\r\n            onSubmit(e!);\r\n            actions.setSubmitting(false);\r\n            onSubmit(shinobi);\r\n          }}\r\n        >\r\n          {({isSubmitting, errors, setFieldValue, touched}) =>(\r\n            <Form>\r\n              <DialogTitle id=\"form-dialog-title\">\r\n                {shinobi.id ? \"Edit Card\" : \"make new card\"}\r\n              </DialogTitle>\r\n              <DialogContent id=\"confirm-dialog-description\">\r\n              <div>\r\n                <Field\r\n                  id=\"name\"\r\n                  name=\"name\"\r\n                  render={({ field }: FieldProps) => (\r\n                    <TextField \r\n                      {...field}\r\n                      error={!!(errors.name && touched.name )}\r\n                      label=\"Name\" \r\n                    />\r\n                  )}\r\n                  />\r\n                <ErrorMessage name=\"name\" component={Error}/>\r\n              </div>\r\n              <div>\r\n                <Field\r\n                  id=\"image\"\r\n                  name=\"image\"\r\n                  render={() => (\r\n                    <Button variant=\"contained\" component=\"label\">\r\n                      Bild\r\n                      <input\r\n                        type=\"file\"\r\n                        style={{display: \"none\"}}\r\n                        onChange={event => {setFieldValue(\"image\", event.currentTarget.files![0])}}\r\n                      />\r\n                    </Button>\r\n                    )}\r\n                  />\r\n                \r\n                <ErrorMessage name =\"image\" component={Error} />\r\n              </div>\r\n              {(Object.keys(Shinobi.properties) as (keyof Shinobi)[]).map(property => {\r\n                return (\r\n                  <div key={property}>\r\n                      {Shinobi.properties[property].label}:\r\n                    <Field\r\n                      id={property}\r\n                      name={property}\r\n                      render={({ field }: FieldProps) => (\r\n                        <TextField\r\n                        error={!!(errors[property] && touched[property])}\r\n                        {...field}\r\n                        label={Shinobi.properties[property].label}\r\n                        />\r\n                        )}\r\n                      />\r\n                    <ErrorMessage name={property} component={Error} />\r\n                  </div>\r\n                );\r\n              }\r\n              )}\r\n              </DialogContent>\r\n              <DialogActions>\r\n                <Button color=\"primary\" onClick={onClose}>\r\n                  Abbrechen\r\n                </Button>\r\n                <Button color=\"primary\" type=\"submit\" disabled={isSubmitting}>\r\n                  Speichern\r\n                </Button>\r\n              </DialogActions>\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n      </Dialog>\r\n    );\r\n  }\r\n  ","C:\\GIT\\react\\supertrumpf\\src\\admin\\Form.styles.ts",["54"],"import styled, {css} from \"styled-components\";\r\nimport { Form as FormikForm, Field as FormikField } from \"formik\";\r\nimport { TextField as MatTextField } from '@material-ui/core';\r\n\r\nexport const Form = styled(FormikForm)`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n    div {\r\n        padding: 3px;\r\n    }   \r\n`;\r\n\r\nexport const Field = styled(FormikField)`\r\n    &.error {\r\n        border: 1px solid red;\r\n    }\r\n`;\r\n\r\n\r\nexport const Label = styled.label`\r\n    width: 120px;\r\n    display: inline-block;\r\n`;\r\nexport const Row = styled.div`\r\n        &:nth-child(2n) {\r\n        background-color: #ccc;\r\n    }       \r\n`;\r\n\r\nexport const Error = styled.div`\r\n  color: red;\r\n`;\r\n\r\nexport const TextField = styled(MatTextField)`\r\n  width: 400px;\r\n` as typeof MatTextField;\r\n","C:\\GIT\\react\\supertrumpf\\src\\game\\Shinobi.ts",[],"C:\\GIT\\react\\supertrumpf\\src\\admin\\validationSchema.tsx",[],"C:\\GIT\\react\\supertrumpf\\src\\admin\\Admin.tsx",[],"C:\\GIT\\react\\supertrumpf\\src\\admin\\List.tsx",["55","56","57"],"C:\\GIT\\react\\supertrumpf\\src\\admin\\ConfirmDialog.tsx",[],"C:\\GIT\\react\\supertrumpf\\src\\admin\\List.styles.ts",[],{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","severity":1,"message":"63","line":5,"column":8,"nodeType":"64","messageId":"65","endLine":5,"endColumn":12},{"ruleId":"62","severity":1,"message":"66","line":6,"column":8,"nodeType":"64","messageId":"65","endLine":6,"endColumn":16},{"ruleId":"62","severity":1,"message":"67","line":7,"column":8,"nodeType":"64","messageId":"65","endLine":7,"endColumn":13},{"ruleId":"62","severity":1,"message":"68","line":9,"column":8,"nodeType":"64","messageId":"65","endLine":9,"endColumn":12},{"ruleId":"62","severity":1,"message":"69","line":10,"column":8,"nodeType":"64","messageId":"65","endLine":10,"endColumn":15},{"ruleId":"62","severity":1,"message":"70","line":2,"column":8,"nodeType":"64","messageId":"65","endLine":2,"endColumn":20},{"ruleId":"62","severity":1,"message":"71","line":1,"column":17,"nodeType":"64","messageId":"65","endLine":1,"endColumn":20},{"ruleId":"62","severity":1,"message":"72","line":8,"column":48,"nodeType":"64","messageId":"65","endLine":8,"endColumn":52},{"ruleId":"62","severity":1,"message":"73","line":15,"column":10,"nodeType":"64","messageId":"65","endLine":15,"endColumn":17},{"ruleId":"62","severity":1,"message":"74","line":15,"column":19,"nodeType":"64","messageId":"65","endLine":15,"endColumn":25},"no-native-reassign",["75"],"no-negated-in-lhs",["76"],"@typescript-eslint/no-unused-vars","'Game' is defined but never used.","Identifier","unusedVar","'DarkMode' is defined but never used.","'Login' is defined but never used.","'From' is defined but never used.","'Shinobi' is defined but never used.","'useCardAdmin' is defined but never used.","'css' is defined but never used.","'Icon' is defined but never used.","'boolean' is defined but never used.","'number' is defined but never used.","no-global-assign","no-unsafe-negation"]