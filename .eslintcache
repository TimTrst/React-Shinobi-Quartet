[{"C:\\GIT\\react\\supertrumpf\\src\\index.tsx":"1","C:\\GIT\\react\\supertrumpf\\src\\App.tsx":"2","C:\\GIT\\react\\supertrumpf\\src\\DarkMode.tsx":"3","C:\\GIT\\react\\supertrumpf\\src\\Game.tsx":"4","C:\\GIT\\react\\supertrumpf\\src\\Card.tsx":"5","C:\\GIT\\react\\supertrumpf\\src\\useCards.tsx":"6","C:\\GIT\\react\\supertrumpf\\src\\Shinobi.ts":"7","C:\\GIT\\react\\supertrumpf\\src\\selectRandomProperty.tsx":"8"},{"size":178,"mtime":1608631189057,"results":"9","hashOfConfig":"10"},{"size":669,"mtime":1608631189053,"results":"11","hashOfConfig":"10"},{"size":113,"mtime":1608631189054,"results":"12","hashOfConfig":"10"},{"size":1504,"mtime":1608631189055,"results":"13","hashOfConfig":"10"},{"size":2137,"mtime":1608638813258,"results":"14","hashOfConfig":"10"},{"size":4147,"mtime":1608631189058,"results":"15","hashOfConfig":"10"},{"size":609,"mtime":1608631189056,"results":"16","hashOfConfig":"10"},{"size":281,"mtime":1608631189057,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1xopfr0",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"C:\\GIT\\react\\supertrumpf\\src\\index.tsx",[],["37","38"],"C:\\GIT\\react\\supertrumpf\\src\\App.tsx",[],"C:\\GIT\\react\\supertrumpf\\src\\DarkMode.tsx",[],"C:\\GIT\\react\\supertrumpf\\src\\Game.tsx",["39","40","41"],"import React, {useState, useEffect} from 'react';\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport './Game.css';\r\nimport Card from './Card';\r\nimport useCards from \"./useCards\";\r\n\r\ninterface Props{\r\n    title: string;\r\n}\r\n\r\nexport default function Game({ title } : Props) {   \r\n    const [state, play] = useCards();\r\n    return(\r\n        <>\r\n            <h1>{title}</h1>\r\n            <div className =\"info\">\r\n                {state.playersTurn ? 'Your turn' : 'Computers turn'}\r\n            </div>\r\n            <div className = \"cards\"> \r\n            {state.player[0] && (\r\n                <Card \r\n                    shinobi={state.player[0]}                                             //Übergeben der Karte mit Values an die Card Klasse!\r\n                    uncovered= {true}                                                    //Aufgedeckt?\r\n                    selectedProperty={state.selectedProperty}                                  //Welche Zeile der Karte wurde gewählt?\r\n                    onSelectedProperty={play}     \r\n                 //remove = {remove}\r\n                 />\r\n            )}\r\n            {state.computer[0] &&(\r\n                <Card \r\n                    shinobi={state.computer[0]} \r\n                    uncovered={state.computerUncovered}\r\n                    selectedProperty={state.selectedProperty}\r\n                //onSelectedProperty={this.getSlectedPropertyHandler.bind(this)()} \r\n                />\r\n             )}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n","C:\\GIT\\react\\supertrumpf\\src\\Card.tsx",["42"],"C:\\GIT\\react\\supertrumpf\\src\\useCards.tsx",["43","44"],"import { useState, useEffect } from 'react';\r\nimport update from 'immutability-helper';\r\nimport axios from 'axios';\r\n\r\nimport Shinobi from \"./Shinobi\";\r\nimport selectRandomProperty from './selectRandomProperty';\r\n\r\ninterface Card {\r\n    name: string;\r\n    image: string;\r\n    size: number;\r\n    weight: number;\r\n    age: number;\r\n    chakra: number;\r\n    power: number;\r\n}\r\n\r\ninterface State{\r\n    computerUncovered: boolean;\r\n    selectedProperty?: keyof Shinobi | '';\r\n    playersTurn: boolean;\r\n    player: Shinobi [];\r\n    computer: Shinobi [];\r\n}\r\n\r\nexport default function useCards():[State, (property: keyof Shinobi) => void] {\r\n    const [state, setState] = useState<State>({\r\n        computerUncovered: false,\r\n        selectedProperty: '',\r\n        playersTurn: true,\r\n        player: [],\r\n        computer: [],\r\n    });\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n        const { data } = await axios.get('http://localhost:3001/card');\r\n        dealCards(data);\r\n     };\r\n        fetchData();\r\n         }, []);\r\n        useEffect(() => {\r\n        if (state.selectedProperty !== '') {\r\n            setTimeout(() => {\r\n                compare(state.selectedProperty as keyof Shinobi);\r\n            }, 2000);\r\n        }\r\n    }, [state.selectedProperty]);\r\n        useEffect(() => {\r\n        if (\r\n            state.computerUncovered === false &&\r\n            state.selectedProperty === '' &&\r\n            state.playersTurn === false\r\n        ) {\r\n        setTimeout(() => {\r\n         const property = selectRandomProperty();\r\n             play(property);\r\n        }, 2000);\r\n        }\r\n  }, [state.computerUncovered, state.selectedProperty, state.playersTurn]);\r\n\r\n    function compare(property: keyof Shinobi){\r\n        let playersTurn = state.playersTurn;\r\n\r\n        const cardPlayer = state.player[0];\r\n        let player = update(state.player, { $splice: [[0,1]] });\r\n        const cardComputer = state.computer[0];\r\n        let computer = update(state.computer, { $splice: [[0,1]] });\r\n    \r\n        if(cardPlayer[property] > cardComputer[property])\r\n        {\r\n            playersTurn = true;\r\n            player = update(player, { $push: [cardPlayer, cardComputer]} );\r\n            //update(this.state.remove, true);\r\n            if(computer.length === 0)\r\n            {\r\n                alert(\"Player wins!\"); \r\n                return;\r\n            }\r\n        }\r\n        else if(cardPlayer[property] < cardComputer[property])\r\n        {\r\n            playersTurn = false;\r\n            computer = update(computer, { $push: [cardComputer, cardPlayer] });\r\n            if(player.length === 0)\r\n            {\r\n                alert(\"Computer wins!\");\r\n                return;\r\n            }\r\n        }\r\n        else{\r\n            player = update(player,  { $push: [cardPlayer]} );\r\n            computer = update(computer, { $push: [cardComputer]} );\r\n        }\r\n    \r\n        setState(\r\n            state => update(state, {\r\n                $set: {\r\n                    computerUncovered: false,\r\n                    selectedProperty: \"\",\r\n                    playersTurn,\r\n                    player,\r\n                    computer,\r\n                },\r\n            }),\r\n        );\r\n    }\r\n\r\n    function play(property: keyof Shinobi) {\r\n        setState(state => \r\n            update(state, {\r\n            selectedProperty:  {$set: property},\r\n            computerUncovered: { $set: true},\r\n            })\r\n        );\r\n    }\r\n\r\n    function dealCards(cards: Shinobi []){\r\n        const computer : Shinobi[] = [];\r\n        const player: Shinobi[] = [];\r\n        cards.forEach((card, index) => {\r\n            const shinobi = new Shinobi(card.name, card.image, card.size, card.weight, card.age, card.chakra, card.power);\r\n            if(index % 2 === 0)\r\n            {\r\n                computer.push(shinobi);\r\n            }else{\r\n                player.push(shinobi);\r\n            }\r\n        });\r\n        setState(prevState => \r\n            update(prevState, {\r\n                player: { $set: player },\r\n                computer: { $set: computer},\r\n            })\r\n        );\r\n    }\r\n    return [state, play];\r\n}","C:\\GIT\\react\\supertrumpf\\src\\Shinobi.ts",[],"C:\\GIT\\react\\supertrumpf\\src\\selectRandomProperty.tsx",[],{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","severity":1,"message":"50","line":1,"column":16,"nodeType":"51","messageId":"52","endLine":1,"endColumn":24},{"ruleId":"49","severity":1,"message":"53","line":1,"column":26,"nodeType":"51","messageId":"52","endLine":1,"endColumn":35},{"ruleId":"49","severity":1,"message":"54","line":2,"column":8,"nodeType":"51","messageId":"52","endLine":2,"endColumn":17},{"ruleId":"49","severity":1,"message":"54","line":2,"column":8,"nodeType":"51","messageId":"52","endLine":2,"endColumn":17},{"ruleId":"49","severity":1,"message":"55","line":8,"column":11,"nodeType":"51","messageId":"52","endLine":8,"endColumn":15},{"ruleId":"56","severity":1,"message":"57","line":48,"column":8,"nodeType":"58","endLine":48,"endColumn":32,"suggestions":"59"},"no-native-reassign",["60"],"no-negated-in-lhs",["61"],"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'PropTypes' is defined but never used.","'Card' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'compare'. Either include it or remove the dependency array.","ArrayExpression",["62"],"no-global-assign","no-unsafe-negation",{"desc":"63","fix":"64"},"Update the dependencies array to be: [compare, state.selectedProperty]",{"range":"65","text":"66"},[1259,1283],"[compare, state.selectedProperty]"]