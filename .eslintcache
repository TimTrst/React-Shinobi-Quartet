[{"C:\\GIT\\react\\supertrumpf\\src\\index.tsx":"1","C:\\GIT\\react\\supertrumpf\\src\\App.tsx":"2","C:\\GIT\\react\\supertrumpf\\src\\game\\DarkMode.tsx":"3","C:\\GIT\\react\\supertrumpf\\src\\game\\Game.tsx":"4","C:\\GIT\\react\\supertrumpf\\src\\game\\Card.tsx":"5","C:\\GIT\\react\\supertrumpf\\src\\game\\useCards.tsx":"6","C:\\GIT\\react\\supertrumpf\\src\\game\\Shinobi.ts":"7","C:\\GIT\\react\\supertrumpf\\src\\game\\CardTable.tsx":"8","C:\\GIT\\react\\supertrumpf\\src\\game\\selectRandomProperty.tsx":"9","C:\\GIT\\react\\supertrumpf\\src\\game\\CardTable.styles.ts":"10","C:\\GIT\\react\\supertrumpf\\src\\login\\login.tsx":"11","C:\\GIT\\react\\supertrumpf\\src\\admin\\Form.tsx":"12","C:\\GIT\\react\\supertrumpf\\src\\admin\\Form.styles.ts":"13","C:\\GIT\\react\\supertrumpf\\src\\admin\\useCardAdmin.tsx":"14"},{"size":178,"mtime":1608631189057,"results":"15","hashOfConfig":"16"},{"size":2309,"mtime":1610094302131,"results":"17","hashOfConfig":"16"},{"size":113,"mtime":1609843889916,"results":"18","hashOfConfig":"16"},{"size":1502,"mtime":1609843969704,"results":"19","hashOfConfig":"16"},{"size":1213,"mtime":1609844011295,"results":"20","hashOfConfig":"16"},{"size":4147,"mtime":1609844010826,"results":"21","hashOfConfig":"16"},{"size":661,"mtime":1610092886531,"results":"22","hashOfConfig":"16"},{"size":1401,"mtime":1609844008676,"results":"23","hashOfConfig":"16"},{"size":281,"mtime":1609844010233,"results":"24","hashOfConfig":"16"},{"size":655,"mtime":1609843885411,"results":"25","hashOfConfig":"16"},{"size":1927,"mtime":1610016742308,"results":"26","hashOfConfig":"16"},{"size":1687,"mtime":1610102233356,"results":"27","hashOfConfig":"16"},{"size":645,"mtime":1610101788910,"results":"28","hashOfConfig":"16"},{"size":1114,"mtime":1610092300597,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1xopfr0",{"filePath":"33","messages":"34","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"32"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"42"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"32"},"C:\\GIT\\react\\supertrumpf\\src\\index.tsx",[],["66","67"],"C:\\GIT\\react\\supertrumpf\\src\\App.tsx",["68","69","70","71","72","73"],"import './App.css';\r\nimport React from \"react\"\r\nimport update from \"immutability-helper\";\r\n\r\nimport Game from \"./game/Game\";\r\nimport DarkMode from \"./game/DarkMode\";\r\nimport Login from \"./login/login\";\r\nimport axios from 'axios';\r\nimport From from \"./admin/Form\";\r\nimport Shinobi from './game/Shinobi';\r\n\r\ninterface State{\r\n  darkMode: boolean;\r\n  loggedIn: boolean;\r\n  errorFromParent: string;\r\n}\r\n\r\nexport default class App extends React.Component<{}, State> {\r\n  state = {\r\n    darkMode: false,\r\n    loggedIn: false,\r\n    errorFromParent: \"\",\r\n  };\r\n\r\n  toggleDarkMode = () => {\r\n    this.setState(prevState => (\r\n      {\r\n        darkMode: !prevState.darkMode\r\n      }\r\n    ));\r\n  };\r\n\r\nhandleLogin = async (username: string, password: string) => {\r\n  const result = await axios.post('http://localhost:3001/login', {\r\n    username,\r\n    password,\r\n  });\r\n  let loggedIn = false;\r\n  let error = \"Anmeldung fehlgeschlagen\";\r\n  if(result.data){\r\n    error = \"\";\r\n    loggedIn = true;\r\n  }\r\n  this.setState(prevState => \r\n    update(prevState, {\r\n      loggedIn: {$set: loggedIn },\r\n      errorFromParent: { $set: error},\r\n     })\r\n  );\r\n}\r\n\r\nrender(){\r\n    return (\r\n      <From\r\n        onSubmit={shinobi => {\r\n        const data = new FormData();\r\n        data.append('name', shinobi.name);\r\n        data.append('image', shinobi.image);\r\n        data.append('size', shinobi.size.toString());\r\n        data.append('weight', shinobi.weight.toString());\r\n        data.append('age', shinobi.age.toString());\r\n        data.append('chakra', shinobi.chakra.toString());\r\n        data.append('power', shinobi.power.toString());\r\n        axios.post('http://localhost:3001/card', data, {\r\n          headers: {\r\n           'content-type': 'multipart/form-data',\r\n           },\r\n      });\r\n    }}/>\r\n        );\r\n        {/*\r\n      <DarkMode.Provider value = {this.state.darkMode}>\r\n        {\r\n          this.state.loggedIn && (\r\n            <>\r\n              <button onClick={this.toggleDarkMode}>DarkMode {this.state.darkMode && \"off\"}</button>\r\n              <Game title=\"Shinobi Quartet\"/>\r\n            </>\r\n          )}\r\n        {\r\n          !this.state.loggedIn && <Login onLogin={this.handleLogin} errorFromParent={this.state.errorFromParent} />\r\n        }\r\n        </DarkMode.Provider>\r\n      */ }\r\n  }\r\n}\r\n\r\n\r\n","C:\\GIT\\react\\supertrumpf\\src\\game\\DarkMode.tsx",[],["74","75"],"C:\\GIT\\react\\supertrumpf\\src\\game\\Game.tsx",["76","77","78"],"import React, {useState, useEffect} from 'react';\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport './Game.css';\r\nimport Card from './Card';\r\nimport useCards from \"./useCards\";\r\n\r\ninterface Props{\r\n    title: string;\r\n}\r\n\r\nexport default function Game({ title } : Props) {   \r\n    const [state, play] = useCards();\r\n    return(\r\n        <>\r\n            <h1>{title}</h1>\r\n            <div className =\"info\">\r\n                {state.playersTurn ? 'Your turn' : 'Computers turn'}\r\n            </div>\r\n            <div className = \"cards\"> \r\n            {state.player[0] && (\r\n                <Card \r\n                    shinobi={state.player[0]}                                             //Übergeben der Karte mit Values an die Card Klasse!\r\n                    uncovered= {true}                                                    //Aufgedeckt?\r\n                    selectedProperty={state.selectedProperty}                                  //Welche Zeile der Karte wurde gewählt?\r\n                    onSelectProperty={play}     \r\n                 //remove = {remove}\r\n                 />\r\n            )}\r\n            {state.computer[0] &&(\r\n                <Card \r\n                    shinobi={state.computer[0]} \r\n                    uncovered={state.computerUncovered}\r\n                    selectedProperty={state.selectedProperty}\r\n                //onSelectedProperty={this.getSlectedPropertyHandler.bind(this)()} \r\n                />\r\n             )}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n",["79","80"],"C:\\GIT\\react\\supertrumpf\\src\\game\\Card.tsx",[],"C:\\GIT\\react\\supertrumpf\\src\\game\\useCards.tsx",["81","82"],"import { useState, useEffect } from 'react';\r\nimport update from 'immutability-helper';\r\nimport axios from 'axios';\r\n\r\nimport Shinobi from \"./Shinobi\";\r\nimport selectRandomProperty from './selectRandomProperty';\r\n\r\ninterface Card {\r\n    name: string;\r\n    image: string;\r\n    size: number;\r\n    weight: number;\r\n    age: number;\r\n    chakra: number;\r\n    power: number;\r\n}\r\n\r\ninterface State{\r\n    computerUncovered: boolean;\r\n    selectedProperty?: keyof Shinobi | '';\r\n    playersTurn: boolean;\r\n    player: Shinobi [];\r\n    computer: Shinobi [];\r\n}\r\n\r\nexport default function useCards():[State, (property: keyof Shinobi) => void] {\r\n    const [state, setState] = useState<State>({\r\n        computerUncovered: false,\r\n        selectedProperty: '',\r\n        playersTurn: true,\r\n        player: [],\r\n        computer: [],\r\n    });\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n        const { data } = await axios.get('http://localhost:3001/card');\r\n        dealCards(data);\r\n     };\r\n        fetchData();\r\n         }, []);\r\n        useEffect(() => {\r\n        if (state.selectedProperty !== '') {\r\n            setTimeout(() => {\r\n                compare(state.selectedProperty as keyof Shinobi);\r\n            }, 2000);\r\n        }\r\n    }, [state.selectedProperty]);\r\n        useEffect(() => {\r\n        if (\r\n            state.computerUncovered === false &&\r\n            state.selectedProperty === '' &&\r\n            state.playersTurn === false\r\n        ) {\r\n        setTimeout(() => {\r\n         const property = selectRandomProperty();\r\n             play(property);\r\n        }, 2000);\r\n        }\r\n  }, [state.computerUncovered, state.selectedProperty, state.playersTurn]);\r\n\r\n    function compare(property: keyof Shinobi){\r\n        let playersTurn = state.playersTurn;\r\n\r\n        const cardPlayer = state.player[0];\r\n        let player = update(state.player, { $splice: [[0,1]] });\r\n        const cardComputer = state.computer[0];\r\n        let computer = update(state.computer, { $splice: [[0,1]] });\r\n    \r\n        if(cardPlayer[property] > cardComputer[property])\r\n        {\r\n            playersTurn = true;\r\n            player = update(player, { $push: [cardPlayer, cardComputer]} );\r\n            //update(this.state.remove, true);\r\n            if(computer.length === 0)\r\n            {\r\n                alert(\"Player wins!\"); \r\n                return;\r\n            }\r\n        }\r\n        else if(cardPlayer[property] < cardComputer[property])\r\n        {\r\n            playersTurn = false;\r\n            computer = update(computer, { $push: [cardComputer, cardPlayer] });\r\n            if(player.length === 0)\r\n            {\r\n                alert(\"Computer wins!\");\r\n                return;\r\n            }\r\n        }\r\n        else{\r\n            player = update(player,  { $push: [cardPlayer]} );\r\n            computer = update(computer, { $push: [cardComputer]} );\r\n        }\r\n    \r\n        setState(\r\n            state => update(state, {\r\n                $set: {\r\n                    computerUncovered: false,\r\n                    selectedProperty: \"\",\r\n                    playersTurn,\r\n                    player,\r\n                    computer,\r\n                },\r\n            }),\r\n        );\r\n    }\r\n\r\n    function play(property: keyof Shinobi) {\r\n        setState(state => \r\n            update(state, {\r\n            selectedProperty:  {$set: property},\r\n            computerUncovered: { $set: true},\r\n            })\r\n        );\r\n    }\r\n\r\n    function dealCards(cards: Shinobi []){\r\n        const computer : Shinobi[] = [];\r\n        const player: Shinobi[] = [];\r\n        cards.forEach((card, index) => {\r\n            const shinobi = new Shinobi(card.name, card.image, card.size, card.weight, card.age, card.chakra, card.power);\r\n            if(index % 2 === 0)\r\n            {\r\n                computer.push(shinobi);\r\n            }else{\r\n                player.push(shinobi);\r\n            }\r\n        });\r\n        setState(prevState => \r\n            update(prevState, {\r\n                player: { $set: player },\r\n                computer: { $set: computer},\r\n            })\r\n        );\r\n    }\r\n    return [state, play];\r\n}","C:\\GIT\\react\\supertrumpf\\src\\game\\Shinobi.ts",[],"C:\\GIT\\react\\supertrumpf\\src\\game\\CardTable.tsx",["83"],"import React from 'react';\r\nimport styled, { StyledProps } from 'styled-components';\r\n\r\nimport Shinobi from './Shinobi';\r\nimport { Td, Tr } from './CardTable.styles';\r\n\r\ninterface Props {\r\n  shinobi: Shinobi;\r\n  onSelectProperty?: (property: keyof Shinobi) => void;\r\n  selectedProperty?: keyof Shinobi | '';\r\n  darkMode: boolean;\r\n  className?: string;\r\n}\r\n\r\nfunction CardTable({\r\n  shinobi,\r\n  onSelectProperty,\r\n  selectedProperty,\r\n  darkMode,\r\n  className,\r\n}: Props) {\r\n  return (\r\n    <table className={className}>\r\n      <tbody>\r\n        {Object.keys(Shinobi.properties).map((property, index) => {\r\n          const shinobiProperty = Shinobi.properties[property];\r\n          const propertyValue = shinobi[property as keyof Shinobi];\r\n          return (\r\n            <Tr\r\n              darkMode={darkMode}\r\n              active={selectedProperty === property}\r\n              key={property}\r\n              onClick={() => {\r\n                onSelectProperty && onSelectProperty(property as keyof Shinobi);\r\n              }}\r\n              className={property}\r\n            >\r\n              <Td>{shinobiProperty.label}</Td>\r\n              <Td>\r\n                {propertyValue}&nbsp;{shinobiProperty.unit}\r\n              </Td>\r\n            </Tr>\r\n          );\r\n        })}\r\n      </tbody>\r\n    </table>\r\n  );\r\n}\r\n\r\nexport default styled(CardTable)`\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n`;\r\n","C:\\GIT\\react\\supertrumpf\\src\\game\\selectRandomProperty.tsx",[],"C:\\GIT\\react\\supertrumpf\\src\\game\\CardTable.styles.ts",[],"C:\\GIT\\react\\supertrumpf\\src\\login\\login.tsx",["84","85"],"C:\\GIT\\react\\supertrumpf\\src\\admin\\Form.tsx",["86","87","88"],"C:\\GIT\\react\\supertrumpf\\src\\admin\\Form.styles.ts",["89"],"C:\\GIT\\react\\supertrumpf\\src\\admin\\useCardAdmin.tsx",["90","91"],"import { useState, useCallback, ChangeEvent } from 'react';\r\nimport React from \"react\";\r\nimport Shinobi from \"../game/Shinobi\";\r\nimport update from \"immutability-helper\";\r\nimport { fileURLToPath } from 'url';\r\n\r\nexport default function useCardAdmin(initialShinobi: Shinobi = new Shinobi(\"\",\"\",0,0,0,0,0))\r\n    :[Shinobi, (event: ChangeEvent<HTMLInputElement>) => void]{\r\n        const [shinobi, setShinobi] = useState<Shinobi>(initialShinobi);\r\n\r\n        const changeProperty = useCallback(\r\n            (event: ChangeEvent<HTMLInputElement>): void => {\r\n              const id = event.currentTarget.id;\r\n              let value: string | File; \r\n              value = event.currentTarget.value;\r\n\r\n              if(id === \"image\"){\r\n                value = event.currentTarget.files![0];\r\n              }\r\n\r\n              setShinobi(shinobiState =>{\r\n                const newState = update(shinobiState, {\r\n                  [id]: { $set: value},\r\n                });\r\n                return newState;\r\n              });\r\n            },\r\n            []\r\n          );\r\n        return [shinobi, changeProperty];\r\n}",{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","severity":1,"message":"97","line":5,"column":8,"nodeType":"98","messageId":"99","endLine":5,"endColumn":12},{"ruleId":"96","severity":1,"message":"100","line":6,"column":8,"nodeType":"98","messageId":"99","endLine":6,"endColumn":16},{"ruleId":"96","severity":1,"message":"101","line":7,"column":8,"nodeType":"98","messageId":"99","endLine":7,"endColumn":13},{"ruleId":"96","severity":1,"message":"102","line":10,"column":8,"nodeType":"98","messageId":"99","endLine":10,"endColumn":15},{"ruleId":"103","severity":1,"message":"104","line":71,"column":9,"nodeType":"105","messageId":"106","endLine":84,"endColumn":11},{"ruleId":"107","severity":1,"message":"108","line":71,"column":9,"nodeType":"105","messageId":"109","endLine":84,"endColumn":11},{"ruleId":"92","replacedBy":"110"},{"ruleId":"94","replacedBy":"111"},{"ruleId":"96","severity":1,"message":"112","line":1,"column":16,"nodeType":"98","messageId":"99","endLine":1,"endColumn":24},{"ruleId":"96","severity":1,"message":"113","line":1,"column":26,"nodeType":"98","messageId":"99","endLine":1,"endColumn":35},{"ruleId":"96","severity":1,"message":"114","line":2,"column":8,"nodeType":"98","messageId":"99","endLine":2,"endColumn":17},{"ruleId":"92","replacedBy":"115"},{"ruleId":"94","replacedBy":"116"},{"ruleId":"96","severity":1,"message":"117","line":8,"column":11,"nodeType":"98","messageId":"99","endLine":8,"endColumn":15},{"ruleId":"118","severity":1,"message":"119","line":48,"column":8,"nodeType":"120","endLine":48,"endColumn":32,"suggestions":"121"},{"ruleId":"96","severity":1,"message":"122","line":2,"column":18,"nodeType":"98","messageId":"99","endLine":2,"endColumn":29},{"ruleId":"96","severity":1,"message":"123","line":1,"column":55,"nodeType":"98","messageId":"99","endLine":1,"endColumn":64},{"ruleId":"118","severity":1,"message":"124","line":33,"column":8,"nodeType":"120","endLine":33,"endColumn":10,"suggestions":"125"},{"ruleId":"96","severity":1,"message":"126","line":5,"column":10,"nodeType":"98","messageId":"99","endLine":5,"endColumn":16},{"ruleId":"96","severity":1,"message":"127","line":5,"column":18,"nodeType":"98","messageId":"99","endLine":5,"endColumn":30},{"ruleId":"96","severity":1,"message":"128","line":6,"column":8,"nodeType":"98","messageId":"99","endLine":6,"endColumn":24},{"ruleId":"96","severity":1,"message":"129","line":1,"column":17,"nodeType":"98","messageId":"99","endLine":1,"endColumn":20},{"ruleId":"96","severity":1,"message":"130","line":2,"column":8,"nodeType":"98","messageId":"99","endLine":2,"endColumn":13},{"ruleId":"96","severity":1,"message":"131","line":5,"column":10,"nodeType":"98","messageId":"99","endLine":5,"endColumn":23},"no-native-reassign",["132"],"no-negated-in-lhs",["133"],"@typescript-eslint/no-unused-vars","'Game' is defined but never used.","Identifier","unusedVar","'DarkMode' is defined but never used.","'Login' is defined but never used.","'Shinobi' is defined but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","no-unreachable","Unreachable code.","unreachableCode",["132"],["133"],"'useState' is defined but never used.","'useEffect' is defined but never used.","'PropTypes' is defined but never used.",["132"],["133"],"'Card' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'compare'. Either include it or remove the dependency array.","ArrayExpression",["134"],"'StyledProps' is defined but never used.","'createRef' is defined but never used.","React Hook useCallback has a missing dependency: 'onLogin'. Either include it or remove the dependency array. If 'onLogin' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["135"],"'Formik' is defined but never used.","'ErrorMessage' is defined but never used.","'validationSchema' is defined but never used.","'css' is defined but never used.","'React' is defined but never used.","'fileURLToPath' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"136","fix":"137"},{"desc":"138","fix":"139"},"Update the dependencies array to be: [compare, state.selectedProperty]",{"range":"140","text":"141"},"Update the dependencies array to be: [onLogin]",{"range":"142","text":"143"},[1259,1283],"[compare, state.selectedProperty]",[1169,1171],"[onLogin]"]